<?php
include_once '../../config/cors.php';
include_once '../../config/database.php';
include_once '../../config/error_handler.php';
include_once '../../config/response_handler.php';

function calculateQRChecksum($data) {
    // Remove existing checksum if present
    if (isset($data['checksum'])) {
        $checksum = $data['checksum'];
        unset($data['checksum']);
    }
    
    // Sort keys for consistent ordering
    ksort($data);
    
    // Create string from data
    $str = '';
    foreach ($data as $key => $value) {
        if ($value !== null && $value !== '') {
            $str .= $key . '=' . $value . '&';
        }
    }
    $str = rtrim($str, '&');
    
    // Calculate checksum using sha256
    return hash('sha256', $str . 'DSK-QR-2024');
}

function generateQRCode($data) {
    require_once '../../vendor/autoload.php';
    
    try {
        $options = new \chillerlan\QRCode\QROptions([
            'outputType' => \chillerlan\QRCode\QRCode::OUTPUT_IMAGE_PNG,
            'eccLevel' => \chillerlan\QRCode\QRCode::ECC_H,
            'scale' => 15,
            'imageBase64' => true,
            'imageTransparent' => false,
            'drawCircularModules' => false,
            'drawLightModules' => true,
            'addQuietzone' => true,
            'quietzoneSize' => 4,
            'moduleValues' => [
                1536 => [0, 0, 0],
                6 => [255, 255, 255]
            ],
            'version' => 7,
            'maskPattern' => -1
        ]);
        
        $qrcode = new \chillerlan\QRCode\QRCode($options);
        $qrData = is_array($data) ? json_encode($data) : $data;
        
        $result = $qrcode->render($qrData);
        
        // Validate the generated QR code
        if (!$result || !str_starts_with($result, 'data:image/png;base64,')) {
            throw new Exception("QR code generation failed - invalid format");
        }
        
        // Verify base64 content
        $base64Data = substr($result, strlen('data:image/png;base64,'));
        if (strlen($base64Data) < 100) {
            throw new Exception("QR code generation failed - insufficient data");
        }
        
        return $result;
    } catch (Exception $e) {
        error_log("QR Code generation error: " . $e->getMessage());
        throw new Exception("Failed to generate QR code: " . $e->getMessage());
    }
    }
}

try {
    $database = new Database();
    $db = $database->getConnection();

    if (!$db) {
        sendError(500, "Database connection failed");
    }

    // Validate authentication for write operations
    if (in_array($_SERVER['REQUEST_METHOD'], ['POST', 'PUT', 'DELETE'])) {
        if (!validateAuthToken()) {
            sendError(401, "Authentication required");
        }
    }

    switch ($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if (isset($_GET['id'])) {
                getPublicUserById($db, $_GET['id']);
            } else {
                getPublicUsers($db);
            }
            break;
        case 'POST':
            createPublicUser($db);
            break;
        case 'PUT':
            updatePublicUser($db);
            break;
        case 'DELETE':
            deletePublicUser($db);
            break;
        default:
            sendError(405, "Method not allowed");
    }
} catch (Exception $e) {
    sendError($e->getCode() ?: 500, $e->getMessage());
}

function getPublicUsers($db) {
    try {
        $query = "SELECT pu.*, d.name as department_name, dv.name as division_name 
                  FROM public_users pu 
                  LEFT JOIN departments d ON pu.department_id = d.id 
                  LEFT JOIN divisions dv ON pu.division_id = dv.id 
                  WHERE pu.status = 'active' 
                  ORDER BY pu.created_at DESC";
        
        $stmt = $db->prepare($query);
        
        if (!$stmt->execute()) {
            throw new Exception("Failed to fetch public users", 500);
        }
        
        $users = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        foreach ($users as &$user) {
            unset($user['password_hash']);
            if (isset($user['qr_code'])) {
                // Only return QR code if it's valid base64 data
                if (!preg_match('/^data:image\/png;base64,/', $user['qr_code'])) {
                    $user['qr_code'] = null;
                }
            }
        }
        
        sendResponse($users, "Public users retrieved successfully");
    } catch (Exception $e) {
        sendError($e->getCode() ?: 500, $e->getMessage());
    }
}

function getPublicUserById($db, $id) {
    try {
        if (!filter_var($id, FILTER_VALIDATE_INT)) {
            throw new Exception("Invalid user ID", 400);
        }

        $query = "SELECT pu.*, d.name as department_name, dv.name as division_name 
                  FROM public_users pu 
                  LEFT JOIN departments d ON pu.department_id = d.id 
                  LEFT JOIN divisions dv ON pu.division_id = dv.id 
                  WHERE pu.id = :id";
        
        $stmt = $db->prepare($query);
        $stmt->bindValue(':id', $id, PDO::PARAM_INT);
        
        if (!$stmt->execute()) {
            throw new Exception("Failed to fetch public user", 500);
        }
        
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if (!$user) {
            throw new Exception("User not found", 404);
        }
        
        unset($user['password_hash']);
        
        // Validate QR code format
        if (isset($user['qr_code']) && !preg_match('/^data:image\/png;base64,/', $user['qr_code'])) {
            $user['qr_code'] = null;
        }
        
        sendResponse($user, "Public user retrieved successfully");
    } catch (Exception $e) {
        sendError($e->getCode() ?: 500, $e->getMessage());
    }
}

function createPublicUser($db) {
    try {
        $data = json_decode(file_get_contents("php://input"));
        
        if (!isset($data->name) || !isset($data->nic) || !isset($data->address) || 
            !isset($data->mobile) || !isset($data->email) || !isset($data->username) || 
            !isset($data->password)) {
            throw new Exception("All required fields must be provided", 400);
        }
        
        $db->beginTransaction();
        
        // Check for existing username or NIC
        $checkQuery = "SELECT id FROM public_users WHERE username = :username OR nic = :nic";
        $checkStmt = $db->prepare($checkQuery);
        $checkStmt->bindValue(':username', $data->username);
        $checkStmt->bindValue(':nic', $data->nic);
        $checkStmt->execute();
        
        if ($checkStmt->fetch()) {
            throw new Exception("Username or NIC already exists", 409);
        }
        
        // Generate next public_id
        $stmt = $db->query("SELECT MAX(CAST(SUBSTRING(public_id, 4) AS UNSIGNED)) as max_id FROM public_users WHERE public_id REGEXP '^PUB[0-9]+$'");
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        $nextId = ($result['max_id'] ?? 0) + 1;
        $publicId = 'PUB' . str_pad($nextId, 5, '0', STR_PAD_LEFT);
        
        // Generate enhanced QR code data
        $qrData = [
            'id' => $publicId,
            'name' => $data->name,
            'nic' => $data->nic,
            'mobile' => $data->mobile,
            'issued' => date('Y-m-d'),
            'authority' => 'DSK',
            'type' => 'public_user',
            'verified' => true
        ];
        
        $qrCode = generateQRCode($qrData);
        
        $passwordHash = password_hash($data->password, PASSWORD_ARGON2ID);
        
        $query = "INSERT INTO public_users (
            public_id, name, nic, address, mobile, email, username, password_hash,
            qr_code, department_id, division_id, status, created_at
        ) VALUES (
            :public_id, :name, :nic, :address, :mobile, :email, :username, :password_hash,
            :qr_code, :department_id, :division_id, 'active', NOW()
        )";
        
        $stmt = $db->prepare($query);
        
        $stmt->bindValue(':public_id', $publicId);
        $stmt->bindValue(':name', $data->name);
        $stmt->bindValue(':nic', $data->nic);
        $stmt->bindValue(':address', $data->address);
        $stmt->bindValue(':mobile', $data->mobile);
        $stmt->bindValue(':email', $data->email);
        $stmt->bindValue(':username', $data->username);
        $stmt->bindValue(':password_hash', $passwordHash);
        $stmt->bindValue(':qr_code', $qrCode);
        $stmt->bindValue(':department_id', isset($data->department_id) ? $data->department_id : null);
        $stmt->bindValue(':division_id', isset($data->division_id) ? $data->division_id : null);
        
        if (!$stmt->execute()) {
            throw new Exception("Failed to create public user");
        }
        
        $userId = $db->lastInsertId();
        $db->commit();
        
        // Fetch created user
        $query = "SELECT pu.*, d.name as department_name, dv.name as division_name 
                  FROM public_users pu 
                  LEFT JOIN departments d ON pu.department_id = d.id 
                  LEFT JOIN divisions dv ON pu.division_id = dv.id 
                  WHERE pu.id = :id";
        $stmt = $db->prepare($query);
        $stmt->bindValue(':id', $userId);
        $stmt->execute();
        
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        unset($user['password_hash']);
        
        sendResponse($user, "Public user created successfully with enhanced QR code", 201);
    } catch (Exception $e) {
        if ($db->inTransaction()) {
            $db->rollBack();
        }
        sendError($e->getCode() ?: 500, $e->getMessage());
    }
}

function updatePublicUser($db) {
    try {
        $data = json_decode(file_get_contents("php://input"));
        
        if (!isset($data->id)) {
            throw new Exception("User ID is required", 400);
        }
        
        $db->beginTransaction();
        
        $updates = [];
        $params = [':id' => $data->id];
        
        if (isset($data->name)) {
            $updates[] = "name = :name";
            $params[':name'] = $data->name;
        }
        if (isset($data->nic)) {
            $updates[] = "nic = :nic";
            $params[':nic'] = $data->nic;
        }
        if (isset($data->address)) {
            $updates[] = "address = :address";
            $params[':address'] = $data->address;
        }
        if (isset($data->mobile)) {
            $updates[] = "mobile = :mobile";
            $params[':mobile'] = $data->mobile;
        }
        if (isset($data->email)) {
            $updates[] = "email = :email";
            $params[':email'] = $data->email;
        }
        if (isset($data->username)) {
            $updates[] = "username = :username";
            $params[':username'] = $data->username;
        }
        if (isset($data->password)) {
            $updates[] = "password_hash = :password_hash";
            $params[':password_hash'] = password_hash($data->password, PASSWORD_ARGON2ID);
        }
        if (isset($data->department_id)) {
            $updates[] = "department_id = :department_id";
            $params[':department_id'] = $data->department_id;
        }
        if (isset($data->division_id)) {
            $updates[] = "division_id = :division_id";
            $params[':division_id'] = $data->division_id;
        }
        if (isset($data->status)) {
            $updates[] = "status = :status";
            $params[':status'] = $data->status;
        }
        
        // Regenerate QR code if basic info changed
        if (isset($data->name) || isset($data->nic) || isset($data->mobile)) {
            // Fetch current user data
            $currentQuery = "SELECT * FROM public_users WHERE id = :id";
            $currentStmt = $db->prepare($currentQuery);
            $currentStmt->bindValue(':id', $data->id);
            $currentStmt->execute();
            $currentUser = $currentStmt->fetch(PDO::FETCH_ASSOC);
            if ($currentUser) {
                // Generate QR data in a format optimized for scanning
                $qrData = [
                    'v' => 1, // version number for future compatibility
                    'id' => $currentUser['public_id'],
                    'public_id' => $currentUser['public_id'], // duplicate for compatibility
                    'name' => $data->name ?? $currentUser['name'],
                    'nic' => $data->nic ?? $currentUser['nic'],
                    'mobile' => $data->mobile ?? $currentUser['mobile'],
                    'issued' => date('Y-m-d'),
                    'authority' => 'DSK',
                    'type' => 'public_user',
                    'verified' => true
                ];
                
                // Add checksum for data integrity
                $qrData['checksum'] = calculateQRChecksum($qrData);
                
                $newQrCode = generateQRCode($qrData);
                $updates[] = "qr_code = :qr_code";
                $params[':qr_code'] = $newQrCode;
            }
        }
        
        if (empty($updates)) {
            throw new Exception("No fields to update", 400);
        }
        
        $query = "UPDATE public_users SET " . implode(", ", $updates) . " WHERE id = :id";
        $stmt = $db->prepare($query);
        
        if (!$stmt->execute($params)) {
            throw new Exception("Failed to update public user");
        }
        
        $db->commit();
        
        // Fetch updated user
        $query = "SELECT pu.*, d.name as department_name, dv.name as division_name 
                  FROM public_users pu 
                  LEFT JOIN departments d ON pu.department_id = d.id 
                  LEFT JOIN divisions dv ON pu.division_id = dv.id 
                  WHERE pu.id = :id";
        
        $stmt = $db->prepare($query);
        $stmt->bindValue(':id', $data->id);
        $stmt->execute();
        
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        unset($user['password_hash']);
        
        sendResponse($user, "Public user updated successfully");
    } catch (Exception $e) {
        if ($db->inTransaction()) {
            $db->rollBack();
        }
        sendError($e->getCode() ?: 500, $e->getMessage());
    }
}

function deletePublicUser($db) {
    try {
        $data = json_decode(file_get_contents("php://input"));
        
        if (!isset($data->id)) {
            throw new Exception("User ID is required", 400);
        }
        
        $query = "UPDATE public_users SET status = 'inactive', updated_at = NOW() WHERE id = :id";
        $stmt = $db->prepare($query);
        $stmt->bindValue(':id', $data->id);
        
        if (!$stmt->execute()) {
            throw new Exception("Failed to delete public user");
        }
        
        if ($stmt->rowCount() === 0) {
            throw new Exception("User not found", 404);
        }
        
        sendResponse(null, "User deleted successfully");
    } catch (Exception $e) {
        sendError($e->getCode() ?: 500, $e->getMessage());
    }
}
?>
